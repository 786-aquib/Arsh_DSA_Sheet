/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/longest-common-prefix/
Solution :-
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
         string ans = "";
         for(int i = 0; i<strs[0].size(); i++){
             bool match = true;
            for(int j = 1; j<strs.size(); j++){
                if(strs[j][i] != strs[0][i]){
                    match = false;
                    break;
                }
            }
         if(!match) break;
         else ans += strs[0][i];
         }
         return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/integer-to-roman/
Solution :-
class Solution {
public:
    string intToRoman(int num) {
        string Roman = "";
        vector<pair<int, string>> storeIntRoman = {{1000, "M"}, {900, "CM"}, {500, "D"}, {400, "CD"}, {100, "C"}, {90, "XC"}, {50, "L"}, {40, "XL"}, {10, "X"}, {9, "IX"}, {5, "V"}, {4, "IV"}, {1, "I"}};
        for (int i = 0; i < storeIntRoman.size(); i++) {
            while (num >= storeIntRoman[i].first) {
                Roman += storeIntRoman[i].second;
                num -= storeIntRoman[i].first;
            }
        }
        return Roman;
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/valid-palindrome-ii/
Solution :-
class Solution {
public:
    bool check(string &s, int i, int j)
    {
        while(i<j)
        {
            if(s[i]!=s[j])
            return false;
            i++;
            j--;
        }
        return true;
    }
    bool validPalindrome(string s) {
        int i=0, j=s.size()-1;
        while(i<j)
        {
            if(s[i]!=s[j])
            break;
            i++;
            j--;
        }
        if(check(s, i+1, j) || check(s, i, j-1))
        return true;
        return false;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/generate-parentheses/
Solution :-
class Solution {
public:
    void func(vector<string> &ans, int n, int open, int close, string curr_str){
        if(curr_str.size() == n*2){
            ans.push_back(curr_str);
            return;
        }
        if(open < n) func(ans, n, open + 1, close, curr_str + '(');
         if(open > close) func(ans, n, open, close + 1, curr_str + ')');
    }
    vector<string> generateParenthesis(int n) {
         vector<string> ans;
         func(ans, n, 0, 0, "");
         return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/simplify-path/
Solution :-