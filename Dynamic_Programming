/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/climbing-stairs/
Solution :-
class Solution {
public:
   int dp[46] = {0};
   void precompute(){
       dp[0] = 0;
       dp[1] = 1;
       dp[2] = 2;
       for(int i = 3; i<=45; i++){
           dp[i]  = dp[i - 1] + dp[i - 2];
       }

   }
    int climbStairs(int n) {
        precompute();
        return dp[n];

    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/maximum-product-subarray/
Solution :-
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxi = INT_MIN;
        int pref = 1, suff = 1;
        for(int i=0;i<nums.size();i++){
          if(pref == 0) pref = 1;
          if(suff == 0)suff = 1;
          pref *= nums[i];
          suff *= nums[nums.size() - i - 1];
          maxi = max(maxi, max(pref, suff));
        }
        return maxi;
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/ones-and-zeroes/
Solution :-
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int sz = strs.size();
       vector<vector<vector<int>>> dp(sz + 1,vector<vector<int>>(m + 1, vector<int>(n + 1)));
       for(int i = 1; i<=sz; i++){
           int countZeroes = count(strs[i-1].begin(), strs[i-1].end(), '0');
           int countOnes = strs[i - 1].size() - countZeroes;
           for(int j = 0; j<=m; j++){
              for(int k = 0; k<=n; k++){
                  if(j - countZeroes >=0 && k - countOnes >= 0)
                  dp[i][j][k] = max(1 + dp[i-1][j - countZeroes][k - countOnes], dp[i-1][j][k]);
                  else
                  dp[i][j][k] = dp[i-1][j][k];
             }
           }
       }
    return dp[sz][m][n];
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/counting-bits/
Solution :-
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> dp(n + 1);
        for(int i = 0; i<=n; i++){
            dp[i] = __builtin_popcount(i);
        }
        return dp;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://practice.geeksforgeeks.org/problems/cutted-segments1642/1
Solution :-
class Solution
{
    public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        vector<int> dp(n + 1, -1);
        dp[0] = 0;
        for(int i = 1; i<= n; i++){
            if(i >= x && dp[i - x] != -1){
                dp[i] = max(dp[i], 1 + dp[i - x]);
            }
            if(i >= y && dp[i - y] != -1){
                dp[i] = max(dp[i], 1 + dp[i - y]);
            }
            if(i >= z && dp[i - z] != -1){
                dp[i] = max(dp[i], 1 + dp[i - z]);
            }
        }
        if(dp[n] < 0) return 0;
        else  return dp[n];
    }
};



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/unique-paths/
Solution :-
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for(int i = 0; i<=m; i++){
            dp[i][0] = 1;
        }
        for(int i = 0; i<=n; i++){
            dp[0][i] = 1;
        }
        for(int i = 1; i<m; i++){
            for(int j = 1; j<n; j++){
                dp[i][j] += (dp[i - 1][j] + dp[i][j - 1]);
            }
        }
        return dp[m - 1][n - 1];
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/minimum-path-sum/
Solution :-
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
       int n = grid.size(), m = grid[0].size();
       vector<vector<int>> dp(n + 1, vector<int>(m + 1,INT_MAX));
       dp[0][0] = grid[0][0];
       for(int i = 1; i<n; i++){
           dp[i][0] = grid[i][0] + dp[i-1][0];
       }
       for(int i = 1; i<m; i++){
           dp[0][i] = grid[0][i] + dp[0][i-1];
       }
       for(int i = 1; i<n; i++){
           for(int j = 1; j<m; j++){
               dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
           }
       }
       return dp[n-1][m-1];
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/coin-change/
Solution :-
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<long long> dp(amount + 1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i<=amount; i++){
            for(int j = 0;j<coins.size(); j++){
                if(i - coins[j] >= 0){
                    dp[i] = min(dp[i], 1 + dp[i - coins[j]]);
                }
            }
        }
        if(dp[amount] == INT_MAX) return -1;
        else return dp[amount];
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/decode-ways/
Solution :-
class Solution {
public:
   bool possible(string check){
       int count = (check[1] - '0') * 1 + (check[0] - '0') * 10;
       return (count <= 26 && count >= 10);
   }
    int numDecodings(string s) {
         int sz = s.size();
       vector<int> dp(sz + 1);
       dp[0] = 1;
       if(s[0] - '0' > 0){
           dp[1] = 1;
       }else{
           dp[1] = 0;
       }
       for(int i = 2; i<=sz; i++){
           if(possible(s.substr(i-2, 2))){
               dp[i] += dp[i - 2];
           }
           if(s[i - 1] - '0' > 0){
               dp[i] += dp[i - 1];
           }
          }
       return dp[sz];
    }
};
]