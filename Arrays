[Problem_Link :- https://leetcode.com/problems/find-the-duplicate-number/
Solution :-   { Linked list two pointer Approach traversing through index of the element }
class Solution {
public:
    int findDuplicate(vector<int>& a) {
      int slow = a[0];
      int fast = a[0];
      do{
           slow=a[slow];
           fast=a[a[fast]];
        }
        while(slow != fast);
      fast = a[0];
      while(slow != fast){
          slow = a[slow];
          fast = a[fast];
      }
      return slow;
    }
};
]
/*****************************************************************************/



[Problem_Link :-https://leetcode.com/problems/sort-colors/
Solution :-
class Solution {
public:
    void sortColors(vector<int>& a) {
        int n = a.size();
       int low=0,hi=n-1,mid=0;
        while(mid<=hi){
            if(a[mid]==0){
             swap(a[mid],a[low]);
             low++;
             mid++;
            }
           else if(a[mid]==2){
                swap(a[mid],a[hi]);
                hi--;
            }
           else  if(a[mid]==1){
                mid++;
            }
       }
    }
};
]


/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/sort-colors/
Solution :-
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size()==0){
            return 0;
        }
        int i=0;
        for(int j=1;j<nums.size();j++){
            if(nums[i]!=nums[j]){
                i++;
                nums[i]=nums[j];
            }
        }
        return i+1;
    }
};
]


/*****************************************************************************/


[Problem_Link :-https://leetcode.com/problems/set-matrix-zeroes/
Solution :-
class Solution {
public:
    void setZeroes(vector<vector<int>>& arr) {

        int r = arr.size();
        int c = arr[0].size();

        vector<int> xr,yc;

        for(int i=0;i<r;i++)
        {
            for(int j =0;j<c;j++)
            {
                if(arr[i][j] == 0)
                {
                    xr.push_back(i);
                    yc.push_back(j);
                }
            }
        }
        for(auto row : xr)
        {
            for(int col = 0;col<c;col++)
            arr[row][col] = 0;
        }

        for(auto col : yc)
        {
            for(int row = 0;row<r;row++)
            arr[row][col] = 0;
        }
    }
};]


/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/move-zeroes/
Solution :-
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        int low = 0, high = 1;
        while(low < n && high < n){
            if(nums[low] == 0 && nums[high] != 0){
                swap(nums[low], nums[high]);
                low ++;
                high ++;
            }else if(nums[low] == 0 && nums[high] == 0){
                swap(nums[low], nums[high]);
                high ++;
            }else{
                low ++;
                high ++;
            }
        }
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
Solution :-
class Solution {
public:
    int maxProfit(vector<int>& a) {
        int n=a.size();
        int minm = 100000;
        int Profit_Achieve = 0;
        for(int i = 0; i<n; i++){
            minm = min(a[i], minm);
            Profit_Achieve = max(Profit_Achieve, a[i] - minm);
        }
        return Profit_Achieve;
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://practice.geeksforgeeks.org/problems/chocolate-distribution-problem3825/1
Solution :-
class Solution{
    public:
    long long findMinDiff(vector<long long> a, long long n, long long m){
         sort(a.begin(), a.end());
         long long ans = INT_MAX;
         int low = 0, high = m - 1;
         while(high < a.size()){
             ans = min(ans, a[high] - a[low]);
             low ++;
             high ++;
         }
         return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
Solution :-
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n == 1){
            return 0;
        }
        int low = 1;
        int start_num = prices[0];
        int ans = 0;
        int checker = prices[0];
        int maxm = 0;
        while(low < n){
           if(prices[low] > checker){
               cout<<start_num<<endl;
               maxm = max(maxm, prices[low] - start_num);
               checker = prices[low];
               low ++;
           }else{
              ans += maxm;
              maxm = 0;
              checker = prices[low];
              start_num = prices[low];
              low ++;
           }
        }
        if(maxm > 0){
            ans += maxm;
        }
        if(ans == 0 && prices[n-1] > prices[0]){
            return prices[n-1] - prices[0];
        }
        return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/subarray-sums-divisible-by-k/
Solution :-
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int count = 0, sum = 0;
        unordered_map<int, int> m{{0, 1}};
        for(int num : nums) {
            sum = (sum + num) % k;
            if(sum < 0) sum += k;
            count += m[sum]++;
        }
        return count;
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/find-all-duplicates-in-an-array/
Solution :-
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            int a = abs(nums[i]) - 1;
            nums[a] = (-1*nums[a]);
            if(nums[a]>0){
                ans.push_back(a+1);
            }
        }
        return ans;
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/container-with-most-water/
Solution :-
class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        int low = 0, end = n-1;
        int ans = 0;
        while(low < end){
            int min_height = min(height[low], height[end]);
            int dist = (end - low);
            ans = max(ans, min_height * dist);
            if(height[low] < height[end]){
                low ++;
            }else{
                end --;
            }
        }
        return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/find-all-duplicates-in-an-array/
Solution :-
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            int a = abs(nums[i]) - 1;
            nums[a] = (-1*nums[a]);
            if(nums[a]>0)
            {
                ans.push_back(a+1);
            }
        }
        return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :-https://leetcode.com/problems/3sum/
Solution :-
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& a) {
       vector<vector<int>> ans;
       set<vector<int>> s;
       int n = a.size();
        sort(a.begin(), a.end());
         for(int i = 0; i<n; i++){
             int first_num = a[i];
             int low = i + 1, high = n - 1;
             while(low < high){
                 int sum = first_num + a[low] + a[high];
                 if(sum == 0){
                     s.insert({first_num, a[low], a[high]});
                     low ++;
                     high --;
                 }else if(sum > 0){
                     high --;
                 }else{
                     low ++;
                 }
             } 
         }
         for(auto triplets : s)
            ans.push_back(triplets);

         return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :-https://leetcode.com/problems/4sum/
Solution :-
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& a, int target) {
        int n = a.size();
        set<vector<int>> st;
        vector<vector<int>> ans;
        sort(a.begin(), a.end());
        for(int i = 0; i<n; i++){
            int first_num = a[i];
            for(int j = i+1; j<n; j++){
                int second_num = a[j];
                int low = j + 1, high = n - 1;
                while(low < high){
                   long long  sum = (long long)first_num + (long long)second_num + (long long)a[low] + (long long)a[high];
                    if(sum == target){
                        st.insert({first_num, second_num, a[low], a[high]});
                        low ++;
                        high --;
                    }else if(sum > target){
                        high --;
                    }else{
                        low ++;
                    }
                }
            }
        }
        for(auto quadraplet : st){
            ans.push_back(quadraplet);
        }
        return ans;
    }
};]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/
Solution :-
class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        int res = 0;
		//First k elements in our window
        for(int i=0;i<k;i++) res+=cardPoints[i];
        int curr=res;
        for(int i=k-1;i>=0;i--) {
			//We remove the last visited element and add the non-visited element from the last
            curr-=cardPoints[i];
            curr+=cardPoints[cardPoints.size()-k+i];
            //We check the maximum value any possible combination can give
			res = max(res, curr);
        }
        return res;
    }
};
]



/*****************************************************************************/


[Problem_Link :- https://leetcode.com/problems/word-search/
Solution :-
class Solution {
public:


   bool search(int i, int j, int n, int m, vector<vector<char>>& board, string &word, int k){
       if(k == word.size()) return true;
       if(i<0 || j<0 || i==n || j == m || board[i][j] != word[k]) return false;
       char ch = word[k];
        board[i][j] = '@';
       bool op1 = search(i + 1 ,j, n, m, board, word, k + 1);
       bool op2 = search(i - 1 ,j, n, m, board, word, k + 1);
       bool op3 = search(i ,j + 1, n, m, board, word, k + 1);
       bool op4 = search(i ,j - 1, n, m, board, word, k + 1);
      board[i][j] = ch;
       return op1 || op2 || op3 || op4;

   }
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(word[0] == board[i][j]){
                    if(search(i ,j, n, m, board, word, 0)) return true;
                }
            }
        }
        return false;
    }
};
]